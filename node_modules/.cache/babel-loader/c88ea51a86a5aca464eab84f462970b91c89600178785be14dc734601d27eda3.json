{"ast":null,"code":"import React, { useMemo } from \"react\";\nimport { useRef, useState, useEffect } from \"react\";\nconst DEFAULTS = {\n  start: 0,\n  end: 100,\n  speed: 1,\n  decrement: null,\n  offsetend: 0,\n  style: null,\n  triggeronce: false,\n  threshold: 0.5,\n  child: \"+\",\n  offset: null,\n  seperate: \"\"\n};\n\n/**\n * Represents the Counter.\n * @constructor\n * @param {number} start - Starting value of the counter.\n * @param {number} end - Ending value of the counter.\n * @param {float} speed - speed.\n * @param {boolean} decrement - Ending value of the counter.\n * @param {number} offsetend - Adds the value to end.\n * @param {number} offset - Increament value by it.\n * @param {any} style - Add your styles here.\n * @param {float} threshold - defines viewport.\n * @param {any} child  - Items after number.\n * @param {string} seperate  - it seperates number by , or dot.\n */\nconst Counter = props => {\n  const {\n    start,\n    end,\n    speed,\n    decrement,\n    offsetend,\n    offset,\n    style,\n    triggeronce,\n    threshold,\n    child,\n    seperate\n  } = useMemo(() => {\n    return {\n      ...DEFAULTS,\n      ...props\n    };\n  }, [props]);\n  const [count, setCount] = useState(0);\n  const [inView, setInview] = useState(false);\n  const countref = useRef(start);\n  const countdown = useRef(end);\n  const [trigger, setTrigger] = useState(null);\n  const viewRef = useRef();\n  const commify = (n, seperatewith) => {\n    var parts = n.toString().split(\".\");\n    const numberPart = parts[0];\n    const decimalPart = parts[1];\n    const thousands = /\\B(?=(\\d{3})+(?!\\d))/g;\n    return numberPart.replace(thousands, `${seperatewith}`) + (decimalPart ? \".\" + decimalPart : \"\");\n  };\n  const formatted = useMemo(() => commify(count, seperate), [count, seperate]);\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      const entry = entries[0];\n      setInview(entry.isIntersecting);\n    }, {\n      threshold\n    });\n    observer.observe(viewRef.current); /// function to be triggered\n\n    const incrementCounter = () => {\n      const accumulator = offset ?? end / 100;\n      if (countref.current < end) {\n        const result = Math.ceil(countref.current + accumulator);\n        if (result >= end) {\n          //   setTrigger(true);\n          return setCount(end + offsetend);\n        }\n        setCount(result);\n        countref.current = result;\n      }\n      if (trigger) {\n        clearTimeout(incrementCounter);\n        setCount(end);\n      }\n      setTimeout(incrementCounter, speed * 100);\n    };\n    const decrementCounter = () => {\n      const accumulator = offset ?? end / 100;\n      if (countdown.current > start) {\n        const result = Math.ceil(countdown.current - accumulator);\n        if (result <= start) {\n          setTrigger(false);\n          return setCount(start + offsetend);\n        }\n        setCount(result);\n        countdown.current = result;\n      }\n      if (trigger) {\n        clearTimeout(decrementCounter);\n        setCount(start);\n      } else {\n        setTimeout(decrementCounter, speed * 50);\n      }\n    };\n    if (inView) {\n      if (decrement) {\n        decrementCounter();\n      } else {\n        incrementCounter();\n      }\n    }\n  }, [inView, start, end, speed, decrement, offsetend, trigger, triggeronce, offset, threshold]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: viewRef\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: style\n  }, formatted, child));\n};\nexport default Counter;","map":{"version":3,"names":["React","useMemo","useRef","useState","useEffect","DEFAULTS","start","end","speed","decrement","offsetend","style","triggeronce","threshold","child","offset","seperate","Counter","props","count","setCount","inView","setInview","countref","countdown","trigger","setTrigger","viewRef","commify","n","seperatewith","parts","toString","split","numberPart","decimalPart","thousands","replace","formatted","observer","IntersectionObserver","entries","entry","isIntersecting","observe","current","incrementCounter","accumulator","result","Math","ceil","clearTimeout","setTimeout","decrementCounter","createElement","ref"],"sources":["C:/Users/ironu/Desktop/restaurant_landing_site/node_modules/react-number-increment/index.js"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport { useRef, useState, useEffect } from \"react\";\nconst DEFAULTS = {\n  start: 0,\n  end: 100,\n  speed: 1,\n  decrement: null,\n  offsetend: 0,\n  style: null,\n  triggeronce: false,\n  threshold: 0.5,\n  child: \"+\",\n  offset: null,\n  seperate: \"\",\n};\n\n/**\n * Represents the Counter.\n * @constructor\n * @param {number} start - Starting value of the counter.\n * @param {number} end - Ending value of the counter.\n * @param {float} speed - speed.\n * @param {boolean} decrement - Ending value of the counter.\n * @param {number} offsetend - Adds the value to end.\n * @param {number} offset - Increament value by it.\n * @param {any} style - Add your styles here.\n * @param {float} threshold - defines viewport.\n * @param {any} child  - Items after number.\n * @param {string} seperate  - it seperates number by , or dot.\n */\nconst Counter = (props) => {\n  const {\n    start,\n    end,\n    speed,\n    decrement,\n    offsetend,\n    offset,\n    style,\n    triggeronce,\n    threshold,\n    child,\n    seperate,\n  } = useMemo(() => {\n    return { ...DEFAULTS, ...props };\n  }, [props]);\n  const [count, setCount] = useState(0);\n  const [inView, setInview] = useState(false);\n  const countref = useRef(start);\n  const countdown = useRef(end);\n  const [trigger, setTrigger] = useState(null);\n  const viewRef = useRef();\n\n  const commify = (n, seperatewith) => {\n    var parts = n.toString().split(\".\");\n    const numberPart = parts[0];\n    const decimalPart = parts[1];\n    const thousands = /\\B(?=(\\d{3})+(?!\\d))/g;\n    return (\n      numberPart.replace(thousands, `${seperatewith}`) +\n      (decimalPart ? \".\" + decimalPart : \"\")\n    );\n  };\n\n  const formatted = useMemo(() => commify(count, seperate), [count, seperate]);\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const entry = entries[0];\n        setInview(entry.isIntersecting);\n      },\n      {\n        threshold,\n      }\n    );\n    observer.observe(viewRef.current); /// function to be triggered\n\n    const incrementCounter = () => {\n      const accumulator = offset ?? end / 100;\n\n      if (countref.current < end) {\n        const result = Math.ceil(countref.current + accumulator);\n\n        if (result >= end) {\n          //   setTrigger(true);\n          return setCount(end + offsetend);\n        }\n\n        setCount(result);\n        countref.current = result;\n      }\n\n      if (trigger) {\n        clearTimeout(incrementCounter);\n        setCount(end);\n      }\n\n      setTimeout(incrementCounter, speed * 100);\n    };\n\n    const decrementCounter = () => {\n      const accumulator = offset ?? end / 100;\n\n      if (countdown.current > start) {\n        const result = Math.ceil(countdown.current - accumulator);\n\n        if (result <= start) {\n          setTrigger(false);\n          return setCount(start + offsetend);\n        }\n\n        setCount(result);\n        countdown.current = result;\n      }\n\n      if (trigger) {\n        clearTimeout(decrementCounter);\n        setCount(start);\n      } else {\n        setTimeout(decrementCounter, speed * 50);\n      }\n    };\n\n    if (inView) {\n      if (decrement) {\n        decrementCounter();\n      } else {\n        incrementCounter();\n      }\n    }\n  }, [\n    inView,\n    start,\n    end,\n    speed,\n    decrement,\n    offsetend,\n    trigger,\n    triggeronce,\n    offset,\n    threshold,\n  ]);\n  return /*#__PURE__*/ React.createElement(\n    \"div\",\n    {\n      ref: viewRef,\n    },\n    /*#__PURE__*/ React.createElement(\n      \"span\",\n      {\n        style: style,\n      },\n      formatted,\n      child\n    )\n  );\n};\n\nexport default Counter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}